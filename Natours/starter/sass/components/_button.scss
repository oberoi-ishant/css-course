.btn {
  /* btn is link. So setting css for link default n visited state */
  &:link,
  &:visited {
    text-decoration: none;
    text-transform: uppercase;
    padding: 1.5rem 4rem;
    /* inline block...so it will be treated as text, hence we can set text-align center
    to its parent .text-box to center it.
    If you make it block,it will take entire width of the parent .text-box, text inside will still be centered */
    display: inline-block;
    border-radius: 10rem;
    transition: all 0.2s; /* transistion property is always put in the intial state */
    position: relative;
    font-size: 1.6rem;
  }

  &--white {
    background-color: $color-white;
    color:$color-primary-dark;

    &::after {
      background-color: $color-white;
    }
  }

  &:hover {
    transform: translateY(-.3rem); /* 3px above, relative to link state */
    box-shadow: 0 1rem 2rem rgba($color-black, 0.2);

      /* pseudo elem when after when .btn is hovered */
      &::after {
        transform: scaleX(1.2) scaleY(1.6);
        /* trick to make it fade-out: opacity: 0 */
        /* when animation finished, comes back to original state */
        opacity: 0;
      }
  }

  /* elem is anchor tag. So active state, when it is clicked */
  &:active {
    transform: translateY(-.1rem); /* 1px above, relative to link state */
    box-shadow: 0 .5rem 1rem rgba($color-black, 0.2);
  }

  /* content and display are required to show pseudo element in screen
  this pseudo elem is treated like a child of the main element, so
  100% width heigth means 100% percent of the main/parent elem */
  &::after {
    content: '';
    display: inline-block;
    width: 100%;
    height: 100%;
    border-radius: 10rem;
    /* to put it behind the .btn, so add position: relative to .btn */
    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;
    /* transistion property is always put in the intial state, initial state is
    .btn::after */
    transition: all 0.4s;
  }

  &--animated {
    animation: moveInBottom 700ms ease-out 0.75s;
    /* button is visible at the start and then after the delay of 0.75s the animation starts
    We want the button to not be visible at start. One solution is to add all these properties
    to the button and hide it first then show.
    Simplest solution is to say apply the style at the start of animation to the button.
    animation-fill-mode: backwards; Means from 100 to back 0. So apply the style at 0% status
    of anination to the button then start animation after the specified delay.
    to apply styles of the 100% status of animation. animation-fill-mode: forwards;
     */
    animation-fill-mode: backwards;
  }
}

.btn-text {
  &:link,
  &:visited {
    font-size: $default-font-size;
    color: $color-primary;
    display: inline-block;
    text-decoration: none;
    border-bottom: 1px solid $color-primary;
    transition: all .2s;
  }

  &:hover {
    // We can use px values here as they are very small.
    // Will not make much difference.
    transform: translateY(-3px);
    color: $color-white;
    background-color: $color-primary;
    box-shadow: 0 1rem 2rem rgba($color-black, .15);
  }

  &:active {
    transform: translateY(0);
    box-shadow: 0 .5rem 1rem rgba($color-black, .15);
  }
}